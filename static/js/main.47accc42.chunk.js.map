{"version":3,"sources":["components/FavouriteDropDown.js","components/Weather.js","components/Sound.jsx","App.js","reportWebVitals.js","index.js"],"names":["FavouriteDropDown","props","Dropdown","placeholder","fluid","selection","options","cities","onChange","fetcher","value","Weather","weatherData","className","Table","celled","inverted","selectable","Header","Row","HeaderCell","name","Body","Cell","weather","main","Math","round","temp","humidity","Audio","id","src","autoPlay","countryOptions","json","map","item","index","key","capital","text","App","useState","sound","setSound","setValue","setWeatherData","photo","setPhoto","loading","setLoading","changeBG","Big","styled","div","primary","handleChange","e","a","fetch","then","response","data","console","log","catch","error","headers","Authorization","result","Loader","numera","floor","random","photos","length","original","setTimeout","err","search","size","active","inline","hidden","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47accc42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport cities from \"../data/favourite_cities.json\";\r\n\r\nconst FavouriteDropDown = (props) => (\r\n  <Dropdown\r\n    placeholder=\"Select favourite city\"\r\n    fluid\r\n    selection\r\n    options={cities}\r\n    onChange={props.fetcher}\r\n    value={props.value}\r\n  />\r\n);\r\n\r\nexport default FavouriteDropDown;\r\n","import React from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\nimport \"./Weather.css\";\r\n\r\nconst Weather = ({ weatherData }) => {\r\n  return (\r\n    <div className=\"table-container\">\r\n      {\r\n        weatherData && (\r\n          <Table celled inverted selectable>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.HeaderCell>City name</Table.HeaderCell>\r\n                <Table.HeaderCell>\r\n                  {weatherData && weatherData.name}\r\n                </Table.HeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n              <Table.Row>\r\n                <Table.Cell>Sky conditions</Table.Cell>\r\n                <Table.Cell>{weatherData.weather[0].main}</Table.Cell>\r\n              </Table.Row>\r\n              <Table.Row>\r\n                <Table.Cell>Temperature</Table.Cell>\r\n                <Table.Cell>\r\n                  {`${\r\n                    weatherData && Math.round(weatherData.main.temp - 273.15)\r\n                  } °C`}\r\n                </Table.Cell>\r\n              </Table.Row>\r\n              <Table.Row>\r\n                <Table.Cell>Humidity</Table.Cell>\r\n                <Table.Cell>\r\n                  {`\r\n                  ${weatherData && weatherData.main.humidity} %`}\r\n                </Table.Cell>\r\n              </Table.Row>\r\n            </Table.Body>\r\n          </Table>\r\n        )\r\n        /*  <div>\r\n          <h1>{weatherData && weatherData.name}</h1>\r\n          <ul>\r\n            Weather\r\n            <li>{`Sky conditions: ${\r\n              weatherData && weatherData.weather[0].main\r\n            }`}</li>\r\n            <li>{`temperature: ${`${\r\n              weatherData && Math.round(weatherData.main.temp - 273.15}°C`)\r\n            }°C`}</li>\r\n            <li>{`humidity: ${weatherData && weatherData.main.humidity}`}</li>\r\n          </ul>\r\n        </div> \r\n      )}*/\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","const Audio = (props) => {\r\n  return <audio id=\"music\" src={props.src} autoPlay></audio>;\r\n};\r\n\r\nexport default Audio;\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Dropdown, Loader } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport FavouriteDropDown from \"./components/FavouriteDropDown\";\r\nimport json from \"./data/capitals.json\";\r\nimport Weather from \"./components/Weather\";\r\nimport styled from \"styled-components\";\r\nimport Audio from \"./components/Sound\";\r\n\r\n/* const countryOptions = cities.map((item, index) => {\r\n  console.log(index);\r\n  return {\r\n    key: index,\r\n    value: item.name,\r\n    text: item.name,\r\n  };\r\n}); */\r\n\r\nconst countryOptions = json.map((item, index) => ({\r\n  key: index,\r\n  value: item.capital,\r\n  text: item.capital,\r\n}));\r\n\r\nconst App = () => {\r\n  const [sound, setSound] = useState(\"\");\r\n  const [value, setValue] = useState(\"\");\r\n  const [weatherData, setWeatherData] = useState(\"\");\r\n  const [photo, setPhoto] = useState(\r\n    \"https://www.almanac.com/sites/default/files/image_nodes/rainbow-weather.jpg\"\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const changeBG = () => {\r\n    return `url(${photo})`;\r\n  };\r\n\r\n  const Big = styled.div`\r\n    background-image: ${(props) => (props.primary ? changeBG : \"none\")};\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-attachment: fixed;\r\n    background-position: 50% 85%; \r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  `;\r\n\r\n  const handleChange = async (e, value) => {\r\n    setValue(value);\r\n    setLoading(true);\r\n    await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${value.value}&appid=8badc74686ae4b31e624cf353b4d97a1`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setWeatherData(data);\r\n        setSound(data.weather[0].main + \".mp3\");\r\n        console.log(\"sound:\", sound);\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    await fetch(`https://api.pexels.com/v1/search?query=${value.value}`, {\r\n      headers: {\r\n        Authorization:\r\n          \"563492ad6f917000010000015bc982b3d2cc41f0891961accb6401ab\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        <Loader hidden inline=\"centered\" />;\r\n        let numera = Math.floor(Math.random() * result.photos.length);\r\n        setPhoto(result.photos[numera].src.original);\r\n        setTimeout(function () {\r\n          setLoading(false);\r\n        }, 1500);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setLoading(false);\r\n        setPhoto(\r\n          \"https://www.almanac.com/sites/default/files/image_nodes/rainbow-weather.jpg\"\r\n        );\r\n      });\r\n  };\r\n  console.log(\"valval:\", value.value);\r\n\r\n  /* const fetcher = (cityName) => {\r\n    console.log(cityName);\r\n\r\n    fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=8badc74686ae4b31e624cf353b4d97a1`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => setWeatherData(data))\r\n      .catch((error) => console.log(error));\r\n\r\n    fetch(`https://api.pexels.com/v1/search?query=${cityName}`, {\r\n      headers: {\r\n        Authorization:\r\n          \"563492ad6f917000010000015bc982b3d2cc41f0891961accb6401ab\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        let numera = Math.floor(Math.random() * result.photos.length);\r\n        /* console.log(\"length: \", result.photos.length);\r\n        console.log(\"numera: \", numera); */\r\n  //setPhoto(result.photos[numera].src.original);\r\n  //console.log(\"picval\", result.photos[0].src.original);\r\n  //})\r\n  //.catch((err) => console.log(err));\r\n  //}; */\r\n\r\n  return (\r\n    <Big primary>\r\n      <Audio key=\"music\" src={sound} />\r\n      <h1>Weather App</h1>\r\n      <div className=\"nav\">\r\n        <FavouriteDropDown\r\n          className=\"dropdown\"\r\n          fetcher={handleChange}\r\n          value={value.value}\r\n        />\r\n        <Dropdown\r\n          placeholder=\"Select city\"\r\n          className=\"dropdown\"\r\n          fluid\r\n          search\r\n          selection\r\n          onChange={handleChange}\r\n          options={countryOptions}\r\n          value={value.value}\r\n        />\r\n      </div>\r\n      <Weather weatherData={weatherData} />\r\n      {loading ? (\r\n        <Loader size=\"massive\" active inline=\"centered\" />\r\n      ) : (\r\n        <Loader size=\"massive\" hidden inline=\"centered\" />\r\n      )}\r\n    </Big>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}